---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Remark42Comments from '../components/Remark42Comments.astro';
import { extractDescription } from '../utils/extractDescription';
import Prose from '../components/Prose.astro';

type EntryData =
	| CollectionEntry<'blog'>['data']
	| CollectionEntry<'monthly'>['data']
	| CollectionEntry<'til'>['data'];

type Props = EntryData & {
	body?: string;
};

const { title, description: providedDescription, pubDate, updatedDate, socialImage, body, tags } = Astro.props;

const description = providedDescription || (body ? extractDescription(body) : '暂无描述');
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} image={socialImage} />
	</head>

	<body>
		<Header />
		<main class="px-4">
			<article class="mx-auto max-w-3xl space-y-10 text-[var(--color-text-secondary)]">
				<div class="space-y-4 border-b border-border-subtle pb-6 text-center">
					<h1 class="text-3xl font-bold text-[var(--color-text-primary)] sm:text-4xl">{title}</h1>
					<div class="space-y-2 text-sm text-[var(--color-text-muted)]">
						<p>
							<FormattedDate date={pubDate} />
						</p>
						{
							updatedDate && (
								<p>
									Last updated on <FormattedDate date={updatedDate} />
								</p>
							)
						}
					</div>
					{tags && tags.length > 0 && (
						<div class="flex flex-wrap justify-center gap-2">
							{tags.map((tag: string) => (
								<a
									href={`/tags/${tag}`}
									class="inline-flex items-center rounded-full bg-[var(--color-bg-muted)] px-3 py-1 text-xs font-medium text-[var(--color-text-primary)] transition-colors hover:bg-[rgba(var(--color-accent-rgb),0.15)] hover:text-[var(--color-accent)]"
								>
									{tag}
								</a>
							))}
						</div>
					)}
				</div>

				<Prose>
					<slot />
				</Prose>

				<Remark42Comments />
			</article>
		</main>
		<Footer />
	</body>
	<script>
		import mermaid from 'mermaid';
		mermaid.initialize({ startOnLoad: true });

		if (typeof window !== 'undefined') {
			const unwrapCardCells = (table) => {
				const cardCells = table.querySelectorAll('[data-cardified]');

				cardCells.forEach((cell) => {
					const wrapper = cell.querySelector('.table-card-value');
					if (wrapper) {
						while (wrapper.firstChild) {
							cell.insertBefore(wrapper.firstChild, wrapper);
						}
						wrapper.remove();
					}
					cell.removeAttribute('data-cardified');
					cell.removeAttribute('data-label');
				});
			};

			const applyResponsiveTables = () => {
				const tables = document.querySelectorAll('.prose table');

				tables.forEach((table) => {
					const headers = Array.from(table.querySelectorAll('thead th')).map((th) => {
						return (th.textContent || '').trim();
					});

					const rows = Array.from(table.querySelectorAll('tbody tr'));
					const hasBodyRows = rows.length > 0;
					const columnThreshold = 3;
					const hasWideHeader = headers.length > columnThreshold;
					const hasWideRow = rows.some((row) => {
						return row.querySelectorAll('td, th').length > columnThreshold;
					});
					const shouldCardify =
						headers.length > 0 && hasBodyRows && (hasWideHeader || hasWideRow);

					table.setAttribute('data-card-mode', shouldCardify ? 'cards' : 'table');

					if (!shouldCardify) {
						unwrapCardCells(table);
						return;
					}

					rows.forEach((row) => {
						const cells = Array.from(row.querySelectorAll('td, th'));

						cells.forEach((cell, index) => {
							const label = headers[index] || '';
							if (label.length === 0) {
								cell.removeAttribute('data-label');
								return;
							}
							cell.setAttribute('data-label', label);
							if (!cell.hasAttribute('data-cardified')) {
								const valueWrapper = document.createElement('div');
								valueWrapper.classList.add('table-card-value');
								while (cell.firstChild) {
									valueWrapper.appendChild(cell.firstChild);
								}
								cell.appendChild(valueWrapper);
								cell.setAttribute('data-cardified', 'true');
							}
						});
					});
				});
			};

			const ensureResponsiveTables = () =>
				window.requestAnimationFrame(applyResponsiveTables);

			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', ensureResponsiveTables, { once: true });
			} else {
				ensureResponsiveTables();
			}

			window.addEventListener('astro:after-swap', ensureResponsiveTables);
		}
	</script>
</html>
