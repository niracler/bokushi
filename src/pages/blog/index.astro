---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import { extractDescription } from '../../utils/extractDescription';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: 960px;
			}
			ul {
				display: flex;
				flex-direction: column;
				gap: 1rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			ul li {
				width: 100%;
				position: relative;
			}
			ul li * {
				text-decoration: none;
				transition: 0.2s ease;
			}
			ul li a {
				display: flex;
				align-items: baseline;
				padding: 0.5rem 0;
				gap: 0.5rem;
			}
			.title {
				margin: 0;
				color: rgb(var(--black));
				line-height: 1.2;
				font-size: 1.5rem;
			}
			.date {
				margin: 0;
				color: rgb(var(--gray));
				font-size: 0.9rem;
				white-space: nowrap;
			}
			ul li a:hover .title,
			ul li a:hover .date {
				color: rgb(var(--accent));
			}
			
			/* 移动端展开描述样式 */
			.post-description {
				margin: 0;
				padding: 0;
				max-height: 0;
				overflow: hidden;
				transition: max-height 0.3s ease, padding 0.3s ease;
				color: rgb(var(--gray-dark));
				font-size: 0.9rem;
				line-height: 1.4;
			}
			
			.post-description.expanded {
				max-height: 200px;
				padding: 0.5rem 0;
			}
			
			/* 展开指示器 */
			.expand-indicator {
				display: none;
				font-size: 0.8rem;
				color: rgb(var(--gray));
				margin-left: auto;
				transition: transform 0.3s ease;
			}
			
			.expand-indicator.rotated {
				transform: rotate(180deg);
			}
			
			/* 预览卡片样式 */
			.preview-card {
				position: fixed;
				width: 300px;
				background: rgb(var(--gray-light));
				border-radius: 12px;
				box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
				border: 1px solid rgba(var(--accent), 0.2);
				overflow: hidden;
				opacity: 0;
				visibility: hidden;
				transition: opacity 0.2s ease, visibility 0.2s ease;
				z-index: 1000;
				backdrop-filter: blur(10px);
				pointer-events: none;
			}
			
			.preview-card.show {
				opacity: 1;
				visibility: visible;
			}
			
			.preview-image {
				width: 100%;
				height: 150px;
				object-fit: cover;
				background: rgb(var(--gray));
			}
			
			.preview-content {
				padding: 1rem;
			}
			
			.preview-title {
				font-size: 1rem;
				font-weight: bold;
				color: rgb(var(--black));
				margin: 0 0 0.5rem 0;
				line-height: 1.3;
			}
			
			.preview-description {
				font-size: 0.85rem;
				color: rgb(var(--gray-dark));
				line-height: 1.4;
				margin: 0;
			}
			
			.preview-no-image {
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: 0.8rem;
				color: rgb(var(--gray));
				background: rgb(var(--gray-light));
			}
			
			@media (max-width: 960px) {
				ul li a {
					flex-direction: column;
					align-items: flex-start;
					gap: 0.3rem;
				}
				.title {
					font-size: 1rem;
				}
				.date {
					font-size: 0.85rem;
				}
				
				/* 在移动设备上显示展开指示器 */
				.expand-indicator {
					display: block;
				}
				
				/* 移动端的标题行使用flex布局 */
				.title-row {
					display: flex;
					align-items: center;
					width: 100%;
					cursor: pointer;
				}
				
				/* 在移动设备上隐藏预览卡片 */
				.preview-card {
					display: none;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<section>
				<ul>
					{
						posts.map((post) => {
							const description = post.data.description || extractDescription(post.body || '');
							return (
								<li>
									<a href={`/${post.id}`} 
										class="post-link"
										data-title={post.data.title}
										data-description={description}
										data-image={post.data.socialImage || ''}>
										<h4 class="title">{post.data.title}</h4>
										<p class="date">
											<FormattedDate date={post.data.pubDate} />
										</p>
									</a>
								</li>
							);
						})
					}
				</ul>
				
				<!-- 全局预览卡片 -->
				<div id="preview-card" class="preview-card">
					<div id="preview-image-container">
						<img id="preview-image" class="preview-image" alt="" style="display: none;" />
						<div id="preview-no-image" class="preview-image preview-no-image" style="display: none;">
							暂无预览图
						</div>
					</div>
					<div class="preview-content">
						<h5 id="preview-title" class="preview-title"></h5>
						<p id="preview-description" class="preview-description"></p>
					</div>
				</div>
			</section>
		</main>
		<Footer />
		
		<script is:inline>
			document.addEventListener('DOMContentLoaded', function() {
				const previewCard = document.getElementById('preview-card');
				const previewImage = document.getElementById('preview-image');
				const previewNoImage = document.getElementById('preview-no-image');
				const previewTitle = document.getElementById('preview-title');
				const previewDescription = document.getElementById('preview-description');
				const postTitles = document.querySelectorAll('.title');
				
				if (!previewCard) return;
				
				let isPreviewVisible = false;
				let showTimeout = null;
				
				postTitles.forEach(function(titleElement) {
					const link = titleElement.closest('.post-link');
					
					titleElement.addEventListener('mouseenter', function(e) {
						// 清除之前的延迟定时器
						if (showTimeout) {
							clearTimeout(showTimeout);
						}
						
						// 设置0.8秒延迟显示
						showTimeout = setTimeout(function() {
							const title = link.getAttribute('data-title');
							const description = link.getAttribute('data-description');
							const image = link.getAttribute('data-image');
							
							// 更新预览卡片内容
							if (previewTitle) previewTitle.textContent = title || '';
							if (previewDescription) previewDescription.textContent = description || '';
							
							if (image && previewImage && previewNoImage) {
								previewImage.setAttribute('src', image);
								previewImage.setAttribute('alt', 'Preview of ' + (title || ''));
								previewImage.style.display = 'block';
								previewNoImage.style.display = 'none';
							} else if (previewImage && previewNoImage) {
								previewImage.style.display = 'none';
								previewNoImage.style.display = 'flex';
							}
							
							// 显示预览卡片
							previewCard.classList.add('show');
							isPreviewVisible = true;
							
							// 设置初始位置
							updatePreviewPosition(e);
						}, 800); // 0.8秒延迟
					});
					
					titleElement.addEventListener('mouseleave', function() {
						// 清除延迟定时器
						if (showTimeout) {
							clearTimeout(showTimeout);
							showTimeout = null;
						}
						
						previewCard.classList.remove('show');
						isPreviewVisible = false;
					});
					
					titleElement.addEventListener('mousemove', function(e) {
						if (isPreviewVisible) {
							updatePreviewPosition(e);
						}
					});
				});
				
				function updatePreviewPosition(e) {
					if (!previewCard) return;
					
					const cardWidth = 300;
					const cardHeight = previewCard.offsetHeight || 250;
					const offset = 20;
					
					let x = e.clientX + offset;
					let y = e.clientY - cardHeight / 2;
					
					// 防止卡片超出视窗边界
					if (x + cardWidth > window.innerWidth) {
						x = e.clientX - cardWidth - offset;
					}
					
					if (y < 0) {
						y = 10;
					}
					
					if (y + cardHeight > window.innerHeight) {
						y = window.innerHeight - cardHeight - 10;
					}
					
					previewCard.style.left = x + 'px';
					previewCard.style.top = y + 'px';
				}
			});
		</script>
	</body>
</html>
