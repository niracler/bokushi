---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import { extractDescription } from '../../utils/extractDescription';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main class="mx-auto max-w-3xl space-y-8 px-4">
			<section>
				<ul class="m-0 flex list-none flex-col gap-4 p-0">
					{
						posts.map((post) => {
							const description = post.data.description || extractDescription(post.body || '');
							return (
								<li class="border-b border-border-subtle pb-2">
									<a
										href={`/${post.id}`}
										class="post-link group flex flex-wrap items-baseline gap-3 no-underline"
										data-title={post.data.title}
										data-description={description}
										data-image={post.data.socialImage || ''}
									>
										<h4 class="title text-lg font-semibold text-[var(--color-text-primary)] transition-colors group-hover:text-[var(--color-accent)] sm:text-xl">
											{post.data.title}
										</h4>
										<p class="date text-sm text-[var(--color-text-secondary)] transition-colors group-hover:text-[var(--color-accent)]">
											<FormattedDate date={post.data.pubDate} />
										</p>
									</a>
								</li>
							);
						})
					}
				</ul>

				<div
					id="preview-card"
					class="preview-card fixed w-72 overflow-hidden rounded-xl border border-border-subtle bg-[var(--color-bg-surface)] shadow-lg opacity-0 transition-opacity duration-200 ease-out"
				>
					<div id="preview-image-container" class="h-40 w-full bg-[var(--color-bg-muted)]">
						<img id="preview-image" class="preview-image h-full w-full object-cover" alt="" style="display: none;" />
						<div id="preview-no-image" class="preview-no-image flex h-full items-center justify-center text-xs text-[var(--color-text-muted)]" style="display: none;">
							暂无预览图
						</div>
					</div>
					<div class="preview-content space-y-2 p-4 text-sm">
						<h5 id="preview-title" class="preview-title font-semibold text-[var(--color-text-primary)]"></h5>
						<p id="preview-description" class="preview-description text-[var(--color-text-secondary)]"></p>
					</div>
				</div>
			</section>
		</main>
		<Footer />

		<script is:inline>
			document.addEventListener('DOMContentLoaded', function() {
				const previewCard = document.getElementById('preview-card');
				const previewImage = document.getElementById('preview-image');
				const previewNoImage = document.getElementById('preview-no-image');
				const previewTitle = document.getElementById('preview-title');
				const previewDescription = document.getElementById('preview-description');
				const postTitles = document.querySelectorAll('.title');

				if (!previewCard) return;

				let isPreviewVisible = false;
				let showTimeout = null;

				const showPreview = (event) => {
					previewCard.style.opacity = '1';
					previewCard.style.visibility = 'visible';
					previewCard.style.pointerEvents = 'auto';
					isPreviewVisible = true;
					updatePreviewPosition(event);
				};

				const hidePreview = () => {
					previewCard.style.opacity = '0';
					previewCard.style.visibility = 'hidden';
					previewCard.style.pointerEvents = 'none';
					isPreviewVisible = false;
				};

				postTitles.forEach(function(titleElement) {
					const link = titleElement.closest('.post-link');
					if (!link) return;

					titleElement.addEventListener('mouseenter', function(e) {
						if (showTimeout) {
							clearTimeout(showTimeout);
						}

						showTimeout = window.setTimeout(function() {
							const title = link.getAttribute('data-title');
							const description = link.getAttribute('data-description');
							const image = link.getAttribute('data-image');

							if (previewTitle) previewTitle.textContent = title || '';
							if (previewDescription) previewDescription.textContent = description || '';

							if (image && previewImage && previewNoImage) {
								previewImage.setAttribute('src', image);
								previewImage.setAttribute('alt', 'Preview of ' + (title || ''));
								previewImage.style.display = 'block';
								previewNoImage.style.display = 'none';
							} else if (previewImage && previewNoImage) {
								previewImage.style.display = 'none';
								previewNoImage.style.display = 'flex';
							}

							showPreview(e);
						}, 800);
					});

					titleElement.addEventListener('mouseleave', function() {
						if (showTimeout) {
							clearTimeout(showTimeout);
							showTimeout = null;
						}

						hidePreview();
					});

					titleElement.addEventListener('mousemove', function(e) {
						if (isPreviewVisible) {
							updatePreviewPosition(e);
						}
					});
				});

				function updatePreviewPosition(e) {
					if (!previewCard) return;

					const cardWidth = 300;
					const cardHeight = previewCard.offsetHeight || 250;
					const offset = 20;

					let x = e.clientX + offset;
					let y = e.clientY - cardHeight / 2;

					if (x + cardWidth > window.innerWidth) {
						x = e.clientX - cardWidth - offset;
					}

					if (y < 0) {
						y = 10;
					}

					if (y + cardHeight > window.innerHeight) {
						y = window.innerHeight - cardHeight - 10;
					}

					previewCard.style.left = x + 'px';
					previewCard.style.top = y + 'px';
				}
			});
		</script>
	</body>
</html>
